{"version":3,"sources":["fonts/SourceSansPro-Regular.otf","fonts/SourceSansPro-Bold.otf","keyboard.svg","down-arrow.svg","About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","About","className","App","onClick","ReactDOM","render","document","getElementById","src","keyboard","alt","date","Date","now","calcTimeDelta","total","window","location","href","downArrow","url","Boolean","hostname","match","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,mD,gBCA3CD,EAAOC,QAAU,IAA0B,gD,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,6OCe5BC,MAVf,WAEE,OACE,yBAAKC,UAAU,SACb,yBAAKA,UAAU,SAAf,yBACA,yBAAKA,UAAU,eAAf,uPAAiR,8BAAM,6BAAN,IAAY,6BAAK,2DAAgC,6BAAhC,oBAAsD,6BAAtD,kBAA0E,6BAA1E,yBAAwG,6BAAzH,gC,OCiFxQC,MAhFf,WAiBE,OACE,yBAAKD,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,WAAWE,QAPhC,WACEC,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,WAO7C,yBAAKC,IAAKC,IAAUC,IAAI,UAG1B,wBAAIT,UAAU,iBAAd,iBAEA,yBAAKA,UAAU,YACb,uCAAY,gDACZ,4BAAI,gCAAJ,yFAGF,yBAAKA,UAAU,eACb,6CACA,6BACE,gCADF,mBAC4B,6BAC1B,gCAFF,eAEwB,iDAFxB,eAMF,yBAAKA,UAAU,aAAY,kBAAC,IAAD,CAAWU,KAAMC,KAAKC,MAAQC,YAAc,IAAIF,KAAK,KAAM,EAAG,GAAI,EAAG,EAAG,EAAG,GAAIA,KAAKC,OAAOE,SAEtH,4BAAQd,UAAU,cAAcE,QAhCtC,WACEa,OAAOC,SAASC,KAAO,2CA+BnB,iBAIA,yBAAKjB,UAAU,gBACb,yBAAKA,UAAU,iBAAf,2BACA,2DACA,0DACA,+EAGF,yBAAKA,UAAU,cACb,yBAAKA,UAAU,iBAAf,yBACA,0CACA,0CACA,gDACA,iDACA,0CACA,wCACA,wCACA,8CACA,wCACA,2CAGF,yBAAKA,UAAU,eACb,gDACA,yBAAKO,IAAKW,IAAWT,IAAI,kBAI7B,yBAAKT,UAAU,SACb,kBAAC,IAAD,CAAQmB,IAAI,kGACVnB,UAAU,mBCzEAoB,QACW,cAA7BL,OAAOC,SAASK,UAEe,UAA7BN,OAAOC,SAASK,UAEhBN,OAAOC,SAASK,SAASC,MACvB,2DCZNnB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBiB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6e98a213.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SourceSansPro-Regular.5e1d162e.otf\";","module.exports = __webpack_public_path__ + \"static/media/SourceSansPro-Bold.1a2a157b.otf\";","module.exports = __webpack_public_path__ + \"static/media/keyboard.6385bc87.svg\";","module.exports = __webpack_public_path__ + \"static/media/down-arrow.4785ffc8.svg\";","import React from 'react'\nimport './About.css'\nimport './fonts/SourceSansPro-Regular.otf'\nimport './fonts/SourceSansPro-Bold.otf'\n\nfunction About() {\n\n  return (\n    <div className=\"About\">\n      <div className=\"title\">About this project...</div>\n      <div className=\"description\">hack_anywhere was launched because there's enormous power in the tech community to lessen the impact of global crises like COVID-19 (coronavirus). In a time where technology is sometimes seen as a virus, now is our time to give back, together. <span><br/> <br/><i>\"Let everything happen to you<br/>Beauty and terror<br/>Just keep going<br/>No feeling is final.\"</i><br/>â€“ Rainer Maria Rilke</span></div>\n    </div>\n  );\n}\n\nexport default About;\n","import React from 'react'\nimport keyboard from './keyboard.svg'\nimport downArrow from './down-arrow.svg'\nimport './App.css'\nimport './fonts/SourceSansPro-Regular.otf'\nimport './fonts/SourceSansPro-Bold.otf'\nimport Iframe from 'react-iframe'\nimport About from './About.js'\nimport ReactDOM from 'react-dom';\nimport Countdown, { calcTimeDelta } from 'react-countdown';\n\nfunction App() {\n  // fetch('http://localhost:5000')\n  // .then((response) => {\n  //   return response.json()\n  // })\n  // .then((data) => {\n  //   console.log(data)\n  // })\n\n  function handleJoinClick() {\n    window.location.href = 'https://airtable.com/shrAnJnjEMZOCDtQj'\n  }\n\n  function handleKeyboardClick() {\n    ReactDOM.render(<About />, document.getElementById('root'))\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"keyboard\" onClick={handleKeyboardClick}>\n          <img src={keyboard} alt=\"logo\" />\n        </div>\n\n        <h2 className=\"hack-anywhere\">hack_anywhere</h2>\n\n        <div className=\"headline\">\n          <h1>A fully <b>remote hackathon</b></h1>\n          <h3><b>></b> &nbsp;Living in quarantine from the COVID-19 virus? Hack alongside others, virtually.</h3>\n        </div>\n\n        <div className=\"hackathon-1\">\n          <div>Hackathon #1</div>\n          <div>\n            <b>></b> &nbsp;QUARANTINED<br />\n            <b>></b> &nbsp;starts <b>Saturday 3-21-2020</b> @ 9am PST\n          </div>\n        </div>\n\n        <div className=\"countdown\"><Countdown date={Date.now() + calcTimeDelta(new Date(2020, 2, 21, 9, 0, 0, 0), Date.now()).total} /></div>\n\n        <button className=\"join-button\" onClick={handleJoinClick}>\n          START HACKING\n        </button>\n\n        <div className=\"how-it-works\">\n          <div className=\"shell-command\">> &nbsp;./how-it-works.sh</div>\n          <div>1. Find an idea to work on</div>\n          <div>2. Tell us about yourself</div>\n          <div>3. Receive invite to assigned Discord channel</div>\n        </div>\n\n        <div className=\"who-we-are\">\n          <div className=\"shell-command\">> &nbsp;./who-we-are.sh</div>\n          <div>engineers</div>\n          <div>designers</div>\n          <div>data scientists</div>\n          <div>product managers</div>\n          <div>animators</div>\n          <div>writers</div>\n          <div>hackers</div>\n          <div>video editors</div>\n          <div>artists</div>\n          <div>musicians</div>\n        </div>\n\n        <div className=\"ideas-arrow\">\n          <div>ideas submitted</div>\n          <img src={downArrow} alt=\"scroll down\" />\n        </div>\n      </header>\n\n      <div className=\"ideas\">\n        <Iframe url=\"https://airtable.com/embed/shr9bIpkZkEtyD7ha?backgroundColor=purple&layout=card&viewControls=on\"\n          className=\"ideas-table\"/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}